







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































import pandas as pd
import numpy as np

def count_codes(DATA, KEYS):
    counts = []
    for ID in DATA.patient_id:
        ID = ID[:-1]
        if not ID in patients.keys():
            counts.append(0)
        else:
            try:
                i = 0
                for disease in patients[ID]:
                    disease = (disease[:4] + "0").ljust(6," ")[:-3]
                    if disease in list(KEYS.code):
                        i += 1
                counts.append(i)
            except:
                counts.append(0)
    return counts

def retrieve_diagnoses_before_x(x, records, TARGET_CODES):
    aut_week = 0
    filtered_records = []
    # Get all the disease records that happened prior to (x+1)th week
    for record in records.split(":")[1:]:
        if "|" in record:
            vals = record.split("|")
            if vals[1].strip() in TARGET_CODES:
                if not aut_week:
                    aut_week = int(vals[0].strip())
                else:
                    aut_week = min(aut_week, int(vals[0].strip()))
            elif int(vals[0].strip()) <= x:
                filtered_records.append(record)
    if aut_week:
        filtered_records = [i for i in filtered_records if int(i.split("|")[0].strip()) < x]
    return [i.split("|")[1].strip() for i in filtered_records]


def retrieve_disease_stats(DF, codedict, patients, categories, offset = 0):
    done = False
    STATS = {}
    DESCR = {}
    GROUP = {}
    COUNTS = {}
    io = 0
    for ID in list(DF.patient_id):
        try:
            if ID in patients.keys():
                already = []
                io += 1
                for disease in patients[ID]:
                    if disease[3] == "." and disease[4] == " ":
                        if not done:
                            done = True
                        if offset:
                            disease = (disease[:4] + "0").ljust(6," ")[:-offset]
                        else:
                             disease = (disease[:4] + "0").ljust(6," ")
                    if ":" in disease:
                        if offset:
                            disease = disease.split(":")[0].ljust(6," ")[:-offset]
                        else:
                            disease = disease.split(":")[0].ljust(6," ")
                    if offset:
                        if len(disease) > 3:
                            disease = disease[:3]
                    DESCR[disease] = codedict[disease] if disease in codedict.keys() else 'NaN'
                    GROUP[disease] = catt[disease] if disease in categories.keys() else 'NaN'
                    if disease not in already:
                        if disease in STATS.keys():
                            STATS[disease] += 1
                            already.append(disease)
                        elif len(disease) > 2:
                            STATS[disease] = 1
                            already.append(disease)
                        else:
                            print(disease)
        except:
            continue
    print(len(STATS.keys()))
    print(len(DESCR.keys()))
    print(len(GROUP.keys()))
    print(len(STATS.keys()))
    df = pd.DataFrame.from_dict({
                                 'code': list(STATS.keys()), 
                                 'description': list(DESCR.values()), 
                                 'disease_group': list(GROUP.values()),
                                 'occurrences': list(STATS.values())
                                })
    return df